{"ast":null,"code":"import Spinner from '../components/Spinner.vue';\nimport { mapGetters } from 'vuex';\nexport default {\n  name: 'Admin',\n  components: {\n    Spinner\n  },\n  computed: {\n    // Map the 'authenticated' getter from Vuex store to a computed property\n    ...mapGetters(['authenticated']),\n    // Get the list of programs from the Vuex store\n    programs() {\n      return this.$store.state.programs;\n    },\n    loading() {\n      return this.$store.state.loading;\n    },\n    // Get a list of unique locations from the programs\n    locations() {\n      const locations = new Set();\n      for (const program of this.programs) {\n        locations.add(program.Location);\n      }\n      return Array.from(locations);\n    },\n    // Filter the programs by the selected location and search query\n    filteredPrograms() {\n      let filtered = this.programs;\n\n      // If a location is selected, filter by that location\n      if (this.selectedLocation) {\n        filtered = filtered.filter(program => program.Location === this.selectedLocation);\n      }\n\n      // If a search query is entered, filter by program name\n      if (this.searchQuery) {\n        const query = this.searchQuery.toLowerCase();\n        filtered = filtered.filter(program => program.ProgramName.toLowerCase().includes(query));\n      }\n      return filtered;\n    },\n    // Sort the filtered programs by program name\n    sortedPrograms() {\n      const sorted = [...this.filteredPrograms].sort((a, b) => a.ProgramName < b.ProgramName ? this.sortOrder === 'ascending' ? -1 : 1 : a.ProgramName > b.ProgramName ? this.sortOrder === 'ascending' ? 1 : -1 : 0);\n      return sorted;\n    }\n  },\n  data() {\n    return {\n      selectedLocation: '',\n      sortOrder: '(ascending)',\n      searchQuery: ''\n    };\n  },\n  created() {\n    console.log('authenticated:', this.authenticated);\n    this.$store.commit('setLoading', true); // True will show the spinner\n    this.$store.dispatch('fetchPrograms').then(() => {\n      this.$store.commit('setLoading', false); // False will hide the spinner after the programs are fetched\n      this.loading = false; // Add this line to set loading to false\n    });\n  },\n\n  methods: {\n    // Toggle the sort order between ascending and descending\n    toggleSortOrder() {\n      this.sortOrder = this.sortOrder === 'ascending' ? 'descending' : 'ascending';\n    }\n  }\n};","map":{"version":3,"names":["Spinner","mapGetters","name","components","computed","programs","$store","state","loading","locations","Set","program","add","Location","Array","from","filteredPrograms","filtered","selectedLocation","filter","searchQuery","query","toLowerCase","ProgramName","includes","sortedPrograms","sorted","sort","a","b","sortOrder","data","created","console","log","authenticated","commit","dispatch","then","methods","toggleSortOrder"],"sources":["C:\\Users\\Thabang\\BookingAir\\ui\\src\\components\\Programs.vue"],"sourcesContent":["<template>\r\n  <div class=\"bg\">\r\n    <h1 class=\"text-center animate__animated animate__zoomIn\">Programs</h1>\r\n    <div class=\"filters pb-5\">\r\n      <!-- FILTER -->\r\n      <label for=\"location\" class=\"px-3\">Filter by location:</label>\r\n      <select v-model=\"selectedLocation\">\r\n        <option value=\"\">All Locations</option>\r\n        <option v-for=\"location in locations\" :key=\"location\">{{ location }}</option>\r\n      </select>\r\n      \r\n      <!-- SORT BY -->\r\n      <label for=\"location\" class=\"px-3\">Sort by:</label>\r\n      <button class=\"sort-button mx-3\" @click=\"toggleSortOrder\">Program Name {{ sortOrder }}</button>\r\n      \r\n      <!-- SEARCH -->\r\n      <label for=\"search\" class=\"px-3\">Search:</label>\r\n      <input id=\"search\" v-model=\"searchQuery\" type=\"text\" placeholder=\"Search programs...\">\r\n    </div>\r\n    <div v-if=\"loading\">\r\n      <Spinner></Spinner>\r\n    </div>\r\n    <div v-else class=\"card-container\">\r\n      <div class=\"card\" v-for=\"program in sortedPrograms\" :key=\"program.id\">\r\n        <div class=\"card-img\">\r\n          <a :href=\"program.photoLink\" target=\"_blank\"><img :src=\"program.imgURL\" /></a>\r\n        </div>\r\n        <div class=\"card-details\">\r\n          <h2>{{ program.Location }}</h2>\r\n          <p>{{ program.ProgramName }}</p>\r\n          <p>{{ program.Period }}</p>\r\n          <!-- <p>{{ program.ProgramDescription }}</p> -->\r\n          <router-link v-if=\"authenticated\" :to=\"{ name: 'program', params: { id: program.ID } }\">\r\n            <button class=\"view-more-button\">View More</button>\r\n          </router-link>\r\n          <div v-else>\r\n            <router-link to=\"/registration\"><button class=\"view-more-button\">Log in to view more</button></router-link>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n\r\n<script>\r\nimport Spinner from '../components/Spinner.vue'\r\nimport { mapGetters } from 'vuex';\r\n\r\nexport default {\r\n  name: 'Admin',\r\n  components: {\r\n    Spinner,\r\n  },\r\n  computed: {\r\n    // Map the 'authenticated' getter from Vuex store to a computed property\r\n    ...mapGetters(['authenticated']),\r\n\r\n    // Get the list of programs from the Vuex store\r\n    programs() {\r\n      return this.$store.state.programs;\r\n    },\r\n    loading() {\r\n      return this.$store.state.loading;\r\n    },\r\n\r\n    // Get a list of unique locations from the programs\r\n    locations() {\r\n      const locations = new Set();\r\n      for (const program of this.programs) {\r\n        locations.add(program.Location);\r\n      }\r\n      return Array.from(locations);\r\n    },\r\n\r\n    // Filter the programs by the selected location and search query\r\n    filteredPrograms() {\r\n      let filtered = this.programs;\r\n\r\n      // If a location is selected, filter by that location\r\n      if (this.selectedLocation) {\r\n        filtered = filtered.filter(program => program.Location === this.selectedLocation);\r\n      }\r\n\r\n      // If a search query is entered, filter by program name\r\n      if (this.searchQuery) {\r\n        const query = this.searchQuery.toLowerCase();\r\n        filtered = filtered.filter(program => program.ProgramName.toLowerCase().includes(query));\r\n      }\r\n      return filtered;\r\n    },\r\n\r\n    // Sort the filtered programs by program name\r\n    sortedPrograms() {\r\n      const sorted = [...this.filteredPrograms].sort((a, b) => a.ProgramName < b.ProgramName ? (this.sortOrder === 'ascending' ? -1 : 1) : (a.ProgramName > b.ProgramName ? (this.sortOrder === 'ascending' ? 1 : -1) : 0));\r\n      return sorted;\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      selectedLocation: '',\r\n      sortOrder: '(ascending)',\r\n      searchQuery: '',\r\n    };\r\n  },\r\n\r\n  created() {\r\n  console.log('authenticated:', this.authenticated);\r\n  this.$store.commit('setLoading', true); // True will show the spinner\r\n  this.$store.dispatch('fetchPrograms').then(() => {\r\n    this.$store.commit('setLoading', false); // False will hide the spinner after the programs are fetched\r\n    this.loading = false; // Add this line to set loading to false\r\n  });\r\n},\r\n\r\n  methods: {\r\n    // Toggle the sort order between ascending and descending\r\n    toggleSortOrder() {\r\n      this.sortOrder = this.sortOrder === 'ascending' ? 'descending' : 'ascending';\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n\r\n\r\n<style scoped>\r\n* {\r\n  margin: 0;\r\n  padding: 0;\r\n  box-sizing: border-box;\r\n  font-family: 'Black Mango Medium';\r\n}\r\n\r\n.bg {\r\n  background: radial-gradient(circle, rgba(248, 248, 248, 1) 0%, rgb(193, 210, 232)100%);\r\n  letter-spacing: 0.1rem;\r\n  word-spacing: 0.2rem;\r\n  line-height: 40px;\r\n}\r\n\r\nh1 {\r\n  text-align: center;\r\n  margin-bottom: 50px;\r\n  font-size: 4rem;\r\n  padding-top: 70px;\r\n  color: rgb(27, 61, 102);\r\n}\r\n\r\n\r\n.card-container {\r\n  max-width: 1500px;\r\n  margin: auto;\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  justify-content: center;\r\n  gap: 1.5rem;\r\n  padding: 0 2rem;\r\n  padding-bottom: 100px;\r\n}\r\n\r\n\r\n.card {\r\n  position: relative;\r\n  width: 400px;\r\n  height: auto;\r\n  overflow: hidden;\r\n  border-radius: 0.5rem;\r\n  box-shadow: 0 5px 10px rgba(0, 0, 0, 0.1);\r\n  display: flex;\r\n  flex-direction: column;\r\n  background-color: #6e91b3;\r\n  border: #6e91b3;\r\n}\r\n\r\n\r\n.card a {\r\n  display: block;\r\n  overflow: hidden;\r\n  position: relative;\r\n}\r\n\r\n.card-details {\r\n  background-color: #6e91b3;\r\n}\r\n\r\n.card-img img {\r\n  width: 100%;\r\n  height: 100%;\r\n  object-fit: cover;\r\n  transition: transform 0.5s ease-in-out;\r\n}\r\n\r\n.card-body {\r\n  padding: 1.5rem;\r\n  background-color: #6e91b3;\r\n}\r\n\r\nh2 {\r\n  margin-bottom: 0.5rem;\r\n  font-size: 2rem;\r\n  color: white;\r\n}\r\n\r\np {\r\n  margin-bottom: 1rem;\r\n  font-size: 1.2rem;\r\n  color: white;\r\n}\r\n\r\n.view-more-button {\r\n  margin-bottom: 30px;\r\n}\r\n\r\n\r\n.view-more-button,\r\noption,\r\nselect,\r\n.sort-button {\r\n  padding: 0.5rem 1rem;\r\n  background-color: rgb(27, 61, 102);\r\n  color: #fff;\r\n  border: none;\r\n  border-radius: 0.5rem;\r\n  cursor: pointer;\r\n  transition: background-color 0.2s ease-in-out;\r\n}\r\n\r\ninput {\r\n  border-radius: 5px;\r\n  padding: 5px;\r\n}\r\n\r\n.view-more-button:hover {\r\n  background-color: rgb(55, 98, 151);\r\n}\r\n\r\n@media (max-width: 768px) {\r\n\r\n  h1{\r\n    font-size: 3rem;\r\n  }\r\n  .card {\r\n    margin-bottom: 1.5rem;\r\n  }\r\n  .filters {\r\n    flex-direction: column;\r\n    align-items: flex-start;\r\n  }\r\n  label {\r\n    margin-bottom: 0.5rem;\r\n  }\r\n  select, input {\r\n    margin-bottom: 1rem;\r\n    width: 100%;\r\n  }\r\n}\r\n</style>\r\n\r\n"],"mappings":"AA8CA,OAAOA,OAAM,MAAO,2BAA0B;AAC9C,SAASC,UAAS,QAAS,MAAM;AAEjC,eAAe;EACbC,IAAI,EAAE,OAAO;EACbC,UAAU,EAAE;IACVH;EACF,CAAC;EACDI,QAAQ,EAAE;IACR;IACA,GAAGH,UAAU,CAAC,CAAC,eAAe,CAAC,CAAC;IAEhC;IACAI,QAAQA,CAAA,EAAG;MACT,OAAO,IAAI,CAACC,MAAM,CAACC,KAAK,CAACF,QAAQ;IACnC,CAAC;IACDG,OAAOA,CAAA,EAAG;MACR,OAAO,IAAI,CAACF,MAAM,CAACC,KAAK,CAACC,OAAO;IAClC,CAAC;IAED;IACAC,SAASA,CAAA,EAAG;MACV,MAAMA,SAAQ,GAAI,IAAIC,GAAG,EAAE;MAC3B,KAAK,MAAMC,OAAM,IAAK,IAAI,CAACN,QAAQ,EAAE;QACnCI,SAAS,CAACG,GAAG,CAACD,OAAO,CAACE,QAAQ,CAAC;MACjC;MACA,OAAOC,KAAK,CAACC,IAAI,CAACN,SAAS,CAAC;IAC9B,CAAC;IAED;IACAO,gBAAgBA,CAAA,EAAG;MACjB,IAAIC,QAAO,GAAI,IAAI,CAACZ,QAAQ;;MAE5B;MACA,IAAI,IAAI,CAACa,gBAAgB,EAAE;QACzBD,QAAO,GAAIA,QAAQ,CAACE,MAAM,CAACR,OAAM,IAAKA,OAAO,CAACE,QAAO,KAAM,IAAI,CAACK,gBAAgB,CAAC;MACnF;;MAEA;MACA,IAAI,IAAI,CAACE,WAAW,EAAE;QACpB,MAAMC,KAAI,GAAI,IAAI,CAACD,WAAW,CAACE,WAAW,EAAE;QAC5CL,QAAO,GAAIA,QAAQ,CAACE,MAAM,CAACR,OAAM,IAAKA,OAAO,CAACY,WAAW,CAACD,WAAW,EAAE,CAACE,QAAQ,CAACH,KAAK,CAAC,CAAC;MAC1F;MACA,OAAOJ,QAAQ;IACjB,CAAC;IAED;IACAQ,cAAcA,CAAA,EAAG;MACf,MAAMC,MAAK,GAAI,CAAC,GAAG,IAAI,CAACV,gBAAgB,CAAC,CAACW,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,CAACL,WAAU,GAAIM,CAAC,CAACN,WAAU,GAAK,IAAI,CAACO,SAAQ,KAAM,WAAU,GAAI,CAAC,IAAI,CAAC,GAAKF,CAAC,CAACL,WAAU,GAAIM,CAAC,CAACN,WAAU,GAAK,IAAI,CAACO,SAAQ,KAAM,WAAU,GAAI,IAAI,CAAC,CAAC,GAAI,CAAE,CAAC;MACrN,OAAOJ,MAAM;IACf;EACF,CAAC;EACDK,IAAIA,CAAA,EAAG;IACL,OAAO;MACLb,gBAAgB,EAAE,EAAE;MACpBY,SAAS,EAAE,aAAa;MACxBV,WAAW,EAAE;IACf,CAAC;EACH,CAAC;EAEDY,OAAOA,CAAA,EAAG;IACVC,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAE,IAAI,CAACC,aAAa,CAAC;IACjD,IAAI,CAAC7B,MAAM,CAAC8B,MAAM,CAAC,YAAY,EAAE,IAAI,CAAC,EAAE;IACxC,IAAI,CAAC9B,MAAM,CAAC+B,QAAQ,CAAC,eAAe,CAAC,CAACC,IAAI,CAAC,MAAM;MAC/C,IAAI,CAAChC,MAAM,CAAC8B,MAAM,CAAC,YAAY,EAAE,KAAK,CAAC,EAAE;MACzC,IAAI,CAAC5B,OAAM,GAAI,KAAK,EAAE;IACxB,CAAC,CAAC;EACJ,CAAC;;EAEC+B,OAAO,EAAE;IACP;IACAC,eAAeA,CAAA,EAAG;MAChB,IAAI,CAACV,SAAQ,GAAI,IAAI,CAACA,SAAQ,KAAM,WAAU,GAAI,YAAW,GAAI,WAAW;IAC9E;EACF;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}